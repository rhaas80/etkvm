#!/bin/bash
PROG_NAME=$(basename $0)

pcommandspath=""
if [ $# = 0 ]
then
	echo  "Usage: ${PROG_NAME}[ -m <metadata file> -f <files list> -w <pcommands path if pcommands not global> ]"
           exit 2;
else
flist=0
m=0
while getopts m:f:w: OPTION
do
    case ${OPTION} in
        m) meta_data=${OPTARG}
		m=1
		if [ ! -f $meta_data ]
		then
			echo "$meta_data not a valid file....try again"
			exit
		fi;;
				
        f) files_list=${OPTARG}
	   flist=1
	        if [ ! -f "$files_list" ]
	        then
        	        echo $files_list not valid files list...try again
                	exit
        	fi;;
        w) #echo optarg is ${OPTARG}
		 if [ ! -d "${OPTARG}" ]
		 then
			echo "${OPTARG} no such directory"
			echo Please check and restart
			exit
		 else
			 pcommandspath=${OPTARG}/bin/
		 fi;;
      \?) echo  "Usage: ${PROG_NAME} [ -m <metadata file> -f <files list> -w <pcommands path> ]"
           exit 2;;
    esac
done
fi

if [ $flist = 0 ]
then
	echo "Please use -f to specify the path to the fileslist"
	exit

fi
#echo $meta_data $files_list $pcommandspath

user=`whoami`
machine=`hostname`
env_name=$HOME/.pcommands/
dir_name=$(date +%s_${$}_${user}_${machine})
#pcommandspath="/home/${user}/pcommands-2.0/bin/"
#pcommandspath=""
#echo $pcommandspath

	which ${pcommandspath}penv &>/dev/null 
	if [ $? -ne 0 ]
	then
		echo pcommands not in global path or has never been setup please run penv to check environment setting and restart
		echo use -w to specify pcommands path
		exit
	fi
#fi


if [ ! -f "${env_name}.pcommandsEnv" ]
then
	echo "pcommands not set up or not installed"
	echo "Please install pcommands and set it up for use with CIGR account before running the script"
	exit
else
	ps_user=$(awk < "${env_name}.pcommandsEnv" '{print $2}' | head -1) 2>/dev/null
	#echo $ps_user; 
	if [ $ps_user != "'CIGR'" ]
	then
		echo "pcommands is set up to use $ps_user not CIGR account"
		echo "please set up pcommands for CIGR and run the script again"
		exit;
	else
#		echo need to check if connected to petashare
		${pcommandspath}pls &> /dev/null
		if [ "$?" -ne "0" ]
		then
			echo Unable to contact petashare server.
			echo Please check the connection to server by running pls before running the script again
			exit
		fi
	fi
fi

if [ -f "${env_name}.transferlog" ]
then
	echo "There was a unsuccessful transfer with the files list $(sed -n '2{p}' ${env_name}.transferlog) to the directory $(sed -n '1{p}' ${env_name}.transferlog)"
	read -p 'Do you want to resume it [y/n]:' user_choice
		
		if [ "$user_choice" = "y" ]
		then
			echo Resuming transfer from $(sed -n '2{p}' ${env_name}.transferlog)

			if [ $(wc -l < ${env_name}.transferlog) = 2 ]
			then
        			start_pointer=0
				echo start_pointer set to $start_pointer
			else
        			start_pointer=$(($(wc -l < ${env_name}.transferlog) - 2))
				echo start_pointer set to $start_pointer
			fi
			echo changing directory to $(sed -n '1{p}' ${env_name}.transferlog)
			${pcommandspath}pcd /tempZone/home/CIGR 
			${pcommandspath}pcd $(sed -n '1{p}' ${env_name}.transferlog)
			${pcommandspath}ppwd
tail -n $(expr $(wc -l < $(sed -n '2{p}' ${env_name}.transferlog)) - $start_pointer) $(sed -n '2{p}' ${env_name}.transferlog) | while read line;
			 do
			 if [ -d "$line" ];
			 then 
					${pcommandspath}pcd /tempZone/home/CIGR/$(sed -n '1{p}' ${env_name}.transferlog)
					${pcommandspath}prsync -r $line i:$line >>  ~/.pcommands/.transferlog 
					
			 else 
					${pcommandspath}pcd /tempZone/home/CIGR/$(sed -n '1{p}' ${env_name}.transferlog)
					${pcommandspath}pput -k $line >>  ${env_name}.transferlog
					
			 fi 
			 done
			 echo File retransfer complete...
			 mv  ${env_name}.transferlog ${env_name}$(sed -n '1{p}' ${env_name}.transferlog)transferlog						
		elif [ "$user_choice" = "n" ] 
		then
			echo Removing the transfer log...
			rm ${env_name}.transferlog
		fi
fi

if [ $m -eq 0 ]
then
	echo "No metadata to attach to $files_list, files will be stored under $dir_name"
else
	echo "$meta_data will be attached to $files_list and will be stored under $dir_name"
	echo ""
fi

${pcommandspath}pcd /tempZone/home/CIGR
${pcommandspath}pmkdir $dir_name

if [ $meta_data ]
then
	echo "Attaching metadata....please wait "
	echo "wait times vary depending on the metadata size"
	while read l
	do
	
	if [ "$l" != "" ]
	then
		name=$(echo $l| awk -F = '{print $1}');
		val=$(echo $l| awk -F = '{print $2}');
		if [ "$name" != "" ] && [ "$val" != "" ] && [ "$name" != " " ] && [ "$val" != ' "' ]
		then
			#echo attaching metadata for line $l
			#echo name=$name val=$val;
			pmeta add -C $dir_name $name $val;
		fi	
		#pmeta add -C $dir_name $(echo $l| awk -F = '{print $1}') $(echo $l| awk -F = '{print $2}')
	fi
	done<$meta_data

echo Attach complete
fi

echo Intiating file transfer....

${pcommandspath}pcd $dir_name
touch ${env_name}.transferlog
echo $dir_name > ${env_name}.transferlog

if [ "$(echo $files_list | awk '{ print substr( $0, 0, 2 ) }')" = "/" ]
then
	echo ${files_list} >> ${env_name}.transferlog
else
	
	echo `pwd`/${files_list} >> ${env_name}.transferlog
fi
error=0
while read line
do
	if [ "$line" != "" ] && [ "$(echo $line | awk '{ print substr( $0, 0, 1 ) }')" != "#" ]
	then

		if [ -d "$line" ]
		then
			#echo .
			${pcommandspath}pput -kr $line 
			echo $line >> ${env_name}.transferlog
		else
			${pcommandspath}pput -k $line 
			echo $line >> ${env_name}.transferlog
		fi
	
		if [ $? = 0 ]
		then
			continue		
		else
			error=1
			echo error set to $error
		fi
	fi
done < $files_list

if [ $error != 1 ]
then

	mv ${env_name}.transferlog ${env_name}${dir_name}transferlog
	echo Transfer complete log available at ${env_name}${dir_name}transferlog
else
	echo There were some unsuccessful transfers, please refer log for further details at ${env_name}.transferlog
fi




